// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServiceClient interface {
	SimpleRPC(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SimpleRPCClient, error)
}

type simpleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServiceClient(cc grpc.ClientConnInterface) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) SimpleRPC(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SimpleRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[0], "/simple.SimpleService/SimpleRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceSimpleRPCClient{stream}
	return x, nil
}

type SimpleService_SimpleRPCClient interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ClientStream
}

type simpleServiceSimpleRPCClient struct {
	grpc.ClientStream
}

func (x *simpleServiceSimpleRPCClient) Send(m *SimpleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceSimpleRPCClient) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
// All implementations should embed UnimplementedSimpleServiceServer
// for forward compatibility
type SimpleServiceServer interface {
	SimpleRPC(SimpleService_SimpleRPCServer) error
}

// UnimplementedSimpleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (*UnimplementedSimpleServiceServer) SimpleRPC(SimpleService_SimpleRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleRPC not implemented")
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_SimpleRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).SimpleRPC(&simpleServiceSimpleRPCServer{stream})
}

type SimpleService_SimpleRPCServer interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ServerStream
}

type simpleServiceSimpleRPCServer struct {
	grpc.ServerStream
}

func (x *simpleServiceSimpleRPCServer) Send(m *SimpleData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceSimpleRPCServer) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simple.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SimpleRPC",
			Handler:       _SimpleService_SimpleRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "simple.proto",
}
