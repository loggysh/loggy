syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/tuxcanfly/loggy/loggy;loggy";
option java_multiple_files = true;
option java_package = "sh.loggy";
option java_outer_classname = "LoggyProto";

package loggy;

message Application {
    string id = 1;
    string name = 2;
    string icon = 4;
}

message ApplicationId {
    string id = 1;
}

message ApplicationList {
    repeated Application apps = 1;
}

message Device {
    string id = 1;
    map<string, string> details = 2;
}

message DeviceId {
    string id = 1;
}

message Instance {
    string id = 1;
    string deviceid = 2;
    string appid = 3;
}

message InstanceId {
    string id = 1;
    string appid = 2;
}

message RecieverId {
    string id = 1;
}

message LoggyMessage {
  string instanceid = 1;
  string sessionid = 2;
  string msg = 3;
  google.protobuf.Timestamp timestamp = 4;
  enum Level {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
    CRASH = 4;
  }
  Level level = 5;
}

service LoggyServerService {
    rpc GetApplication (ApplicationId) returns (Application) {}
    rpc InsertApplication (Application) returns (ApplicationId) {}

    rpc GetDevice (DeviceId) returns (Device) {}
    rpc InsertDevice (Device) returns (DeviceId) {}

    rpc GetInstance (InstanceId) returns (Instance) {}
    rpc InsertInstance (Instance) returns (InstanceId) {}

    rpc LoggyServer (stream LoggyMessage) returns (google.protobuf.Empty) {}
    rpc GetReciever (InstanceId) returns (RecieverId) {}
    rpc RegisterReciever (RecieverId) returns (stream LoggyMessage) {}
}

service LoggySenderService {
    rpc InsertInstance (Instance) returns (InstanceId) {}
    rpc InsertDevice (Device) returns (DeviceId) {}
    rpc RegisterSender (stream LoggyMessage) returns (google.protobuf.Empty) {}
}

service LoggyRecieverService {
    rpc GetApplication (ApplicationId) returns (Application) {}
    rpc InsertApplication (Application) returns (ApplicationId) {}

    rpc GetReciever (InstanceId) returns (RecieverId) {}
    rpc RegisterReciever (RecieverId) returns (stream LoggyMessage) {}
}
